Q4. Design suitable data structures and implement Pass-II of a two-pass macro-processor.
 (BE READY WITH YOUR IC CODE OF PASS 1))

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Classes for MNT, MDT, and PNT from Pass 1
class MNTEntry {
    String macroName;
    int mdtIndex;

    public MNTEntry(String macroName, int mdtIndex) {
        this.macroName = macroName;
        this.mdtIndex = mdtIndex;
    }
}

class MDTEntry {
    String definition;

    public MDTEntry(String definition) {
        this.definition = definition;
    }
}

class PNT {
    Map<String, Integer> parameterMap = new HashMap<>();

    public int addParameter(String param) {
        if (!parameterMap.containsKey(param)) {
            parameterMap.put(param, parameterMap.size());
        }
        return parameterMap.get(param);
    }

    public Integer getParameterIndex(String param) {
        return parameterMap.getOrDefault(param, -1);
    }
}

public class MacroProcessorPass2 {
    List<MNTEntry> MNT;
    List<MDTEntry> MDT;
    Map<String, PNT> PNTTAB;

    public MacroProcessorPass2(List<MNTEntry> MNT, List<MDTEntry> MDT, Map<String, PNT> PNTTAB) {
        this.MNT = MNT;
        this.MDT = MDT;
        this.PNTTAB = PNTTAB;
    }

    public void processLine(String line, List<String> outputCode) {
        String[] tokens = line.split("\\s+");
        String firstToken = tokens[0];

        // Check if the first token is a macro call
        MNTEntry macroEntry = findMacroInMNT(firstToken);
        if (macroEntry != null) {
            // Macro call found, perform expansion
            expandMacro(macroEntry, tokens, outputCode);
        } else {
            // Not a macro call, add the line as is
            outputCode.add(line);
        }
    }

    private MNTEntry findMacroInMNT(String macroName) {
        for (MNTEntry entry : MNT) {
            if (entry.macroName.equals(macroName)) {
                return entry;
            }
        }
        return null;
    }

    private void expandMacro(MNTEntry macroEntry, String[] tokens, List<String> outputCode) {
        int mdtIndex = macroEntry.mdtIndex;
        String macroName = macroEntry.macroName;

        // Retrieve the PNT for the macro to map parameters
        PNT pnt = PNTTAB.get(macroName);
        String[] actualArgs = new String[pnt.parameterMap.size()];

        // Map actual arguments to the parameter positions
        for (int i = 1; i < tokens.length; i++) {
            String[] arg = tokens[i].split("=");
            if (arg.length == 2) {
                actualArgs[pnt.getParameterIndex(arg[0].replace("&", ""))] = arg[1];
            } else {
                actualArgs[i - 1] = tokens[i]; // Positional parameter
            }
        }

        // Expand the macro by iterating over MDT entries
        for (int i = mdtIndex + 1; i < MDT.size(); i++) {
            String mdtLine = MDT.get(i).definition;
            if (mdtLine.equals("MEND")) break;

            // Substitute parameters with actual arguments
            String expandedLine = substituteParameters(mdtLine, actualArgs);
            outputCode.add(expandedLine);
        }
    }

    private String substituteParameters(String line, String[] actualArgs) {
        StringBuilder result = new StringBuilder();
        String[] tokens = line.split("\\s+");

        for (String token : tokens) {
            if (token.startsWith("#")) {
                // Remove any non-digit characters after the '#' (e.g., commas) before parsing
                String paramIndexStr = token.substring(1).replaceAll("\\D", "");
                int paramIndex = Integer.parseInt(paramIndexStr);
                result.append(actualArgs[paramIndex]).append(" ");
            } else {
                result.append(token).append(" ");
            }
        }
        return result.toString().trim();
    }

    public static void main(String[] args) {
        // Initialize MNT, MDT, and PNTTAB based on Pass 1
        List<MNTEntry> MNT = new ArrayList<>();
        List<MDTEntry> MDT = new ArrayList<>();
        Map<String, PNT> PNTTAB = new HashMap<>();

        // Example MNT, MDT, and PNTTAB setup (normally generated by Pass 1)
        MNT.add(new MNTEntry("M1", 0));
        MNT.add(new MNTEntry("M2", 6));

        MDT.add(new MDTEntry("M1 &X, &Y, &A=AREG, &B="));
        MDT.add(new MDTEntry("MOVER #2, #0"));
        MDT.add(new MDTEntry("ADD #2, ='1'"));
        MDT.add(new MDTEntry("MOVER #3, #1"));
        MDT.add(new MDTEntry("ADD #3, ='5'"));
        MDT.add(new MDTEntry("MEND"));
        MDT.add(new MDTEntry("M2 &P, &Q, &U=CREG, &V=DREG"));
        MDT.add(new MDTEntry("MOVER #2, #0"));
        MDT.add(new MDTEntry("MOVER #3, #1"));
        MDT.add(new MDTEntry("ADD #2, ='15'"));
        MDT.add(new MDTEntry("ADD #3, ='10'"));
        MDT.add(new MDTEntry("MEND"));

        PNT pntM1 = new PNT();
        pntM1.addParameter("X");
        pntM1.addParameter("Y");
        pntM1.addParameter("A");
        pntM1.addParameter("B");
        PNTTAB.put("M1", pntM1);

        PNT pntM2 = new PNT();
        pntM2.addParameter("P");
        pntM2.addParameter("Q");
        pntM2.addParameter("U");
        pntM2.addParameter("V");
        PNTTAB.put("M2", pntM2);

        // Input source code with macro calls
        String[] sourceCode = {
                "START 100",
                "M1 10, 20, &B=CREG",
                "M2 100, 200, &V=AREG, &U=BREG",
                "END"
        };

        List<String> outputCode = new ArrayList<>();
        MacroProcessorPass2 processor = new MacroProcessorPass2(MNT, MDT, PNTTAB);

        // Process each line in the source code
        for (String line : sourceCode) {
            processor.processLine(line, outputCode);
        }

        // Print expanded code
        System.out.println("Expanded Source Code:");
        for (String line : outputCode) {
            System.out.println(line);
        }
    }
}